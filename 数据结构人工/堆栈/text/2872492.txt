2. 表达式求值  表达式求值是高级语言编译中的一个基本问题， 是栈的典型应用实例。 任何一个表达式都是由操作数(operand)、 运算符(operator)和界限符(delimiter)组成的。操作数既可以是常数， 也可以是被说明为变量或常量的标识符；运算符可以分为算术运算符、 关系运算符和逻辑运算符三类；基本界限符有左右括号和表达式结束符等。  1） 无括号算术表达式求值  表达式计算 程序设计语言中都有计算表达式的问题， 这是语言编译中的典型问题。      (1) 表达式形式： 由运算对象、 运算符及必要的表达式括号组成；      (2) 表达式运算： 运算时要有一个正确的运算形式顺序。 由于某些运算符可能具有比别的运算符更高的优先级，因此表达式不可能严格的从左到右， 见下图。  2） 算术表达式处理规则 (1) 规定优先级表。 (2) 设置两个栈： OVS(运算数栈)和OPTR(运算符栈)。 (3) 自左向右扫描，遇操作数进OVS，遇操作符则与OPTR栈顶优先数比较：当前操作符>OPTR栈顶, 当前操作符进OPTR栈当前操作符≤OPTR栈顶，OVS栈顶、次顶和OPTR栈顶，退栈形成运算T(i)，T(i)进OVS栈。  例： 实现A/B↑C+D*E＃的运算过程时栈区变化情况如下图所示。  3） 带括号算术表达式 假设操作数是整型常数，运算符只含加、减、乘、除等四种运算符， 界限符有左右括号和表达式起始、结束符“＃”，如： ＃（7+15）*（23-28/4）＃。 引入表达式起始、 结束符是为了方便。 要对一个简单的算术表达式求值， 首先要了解算术四则运算的规则， 即：  (1) 从左算到右；  (2) 先乘除， 后加减；  (3) 先括号内， 后括号外。  运算符和界限符可统称为算符，它们构成的集合命名为OPS。根据上述三条运算规则，在运算过程中，任意两个前后相继出现的算符θ1和θ2之间的优先关系必为下面三种关系之一：  θ1<θ2， θ1的优先权低于θ2。  θ1=θ2， θ1的优先权等于θ2。  θ1>θ2， θ1的优先权高于θ2。 实现算符优先算法时需要使用两个工作栈： 一个称作operator， 用以存放运算符；另一个称作operand，用以存放操作数或运算的中间结果。 算法的基本过程如下： 首先初始化操作数栈operand和运算符栈operator， 并将表达式起始符“＃”压入运算符栈； 依次读入表达式中的每个字符，若是操作数则直接进入操作数栈operand， 若是运算符，则与运算符栈operator的栈顶运算符进行优先权比较，并做如下处理：  (1) 若栈顶运算符的优先级低于刚读入的运算符， 则让刚读入的运算符进operator栈；  (2) 若栈顶运算符的优先级高于刚读入的运算符，则将栈顶运算符退栈，送入θ，同时将操作数栈operand退栈两次，得到两个操作数a、b，对a、 b进行θ运算后， 将运算结果作为中间结果推入operand栈；  (3) 若栈顶运算符的优先级与刚读入的运算符的优先级相同，说明左右括号相遇，只需将栈顶运算符（左括号）退栈即可。 